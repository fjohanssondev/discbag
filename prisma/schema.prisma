// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Bag {
    id          String   @id @default(cuid())
    name        String
    description String?
    discs       Disc[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String

    @@index([userId])
}

enum DiscType {
    PUTTER
    MIDRANGE
    FAIRWAY_DRIVER
    DISTANCE_DRIVER
}

model Disc {
    id           String   @id @default(cuid())
    name         String
    description  String?
    image        String?
    speed        Int
    glide        Int
    turn         Int
    fade         Int
    manufacturer String
    type         DiscType @default(PUTTER)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String?
    Bag          Bag?     @relation(fields: [bagId], references: [id])
    bagId        String?

    @@index([userId])
    @@index([bagId])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

enum Role {
    USER
    ADMIN
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    discs         Disc[]
    role          Role      @default(USER)
    bags          Bag[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
